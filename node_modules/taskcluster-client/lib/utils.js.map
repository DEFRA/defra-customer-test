{
  "version": 3,
  "sources": [
    "utils.js"
  ],
  "names": [
    "parseTime",
    "require",
    "slugid",
    "fromNow",
    "offset",
    "reference",
    "undefined",
    "Date",
    "days",
    "months",
    "years",
    "retval",
    "getTime",
    "weeks",
    "hours",
    "minutes",
    "seconds",
    "exports",
    "fromNowJSON",
    "toJSON",
    "nice"
  ],
  "mappings": ";;AAAA,IAAIA,YAAYC,QAAQ,aAAR,CAAhB;AACA,IAAIC,SAAYD,QAAQ,QAAR,CAAhB;;AAEA;;;;;;;;;AASA,IAAIE,UAAU,SAAVA,OAAU,CAASC,MAAT,EAAiBC,SAAjB,EAA4B;AACxC,MAAIA,cAAcC,SAAlB,EAA6B;AAC3BD,gBAAY,IAAIE,IAAJ,EAAZ;AACD;AACDH,WAASJ,UAAUI,UAAU,EAApB,CAAT;;AAEAA,SAAOI,IAAP,IAAe,KAAKJ,OAAOK,MAA3B;AACAL,SAAOI,IAAP,IAAe,MAAMJ,OAAOM,KAA5B;;AAEA,MAAIC,SAAS,IAAIJ,IAAJ,CACXF,UAAUO,OAAV;AACA;AACA;AAFA,IAGER,OAAOS,KAAP,GAAiB,CAAjB,GAAqB,EAArB,GAA0B,EAA1B,GAA+B,EAA/B,GAAoC,IAHtC,GAIET,OAAOI,IAAP,GAAqB,EAArB,GAA0B,EAA1B,GAA+B,EAA/B,GAAoC,IAJtC,GAKEJ,OAAOU,KAAP,GAA0B,EAA1B,GAA+B,EAA/B,GAAoC,IALtC,GAMEV,OAAOW,OAAP,GAA+B,EAA/B,GAAoC,IANtC,GAOEX,OAAOY,OAAP,GAAoC,IAR3B,CAAb;AAUA,SAAOL,MAAP;AACD,CApBD;;AAsBA;AACAM,QAAQd,OAAR,GAAkBA,OAAlB;;AAEA;;;;;;;;;;;;;AAaA,IAAIe,cAAc,SAAdA,WAAc,CAASd,MAAT,EAAiBC,SAAjB,EAA4B;AAC5C,SAAOF,QAAQC,MAAR,EAAgBC,SAAhB,EAA2Bc,MAA3B,EAAP;AACD,CAFD;;AAIA;AACAF,QAAQC,WAAR,GAAsBA,WAAtB;;AAEA;AACAD,QAAQf,MAAR,GAAiB,YAAW;AAC1B,SAAOA,OAAOkB,IAAP,EAAP;AACD,CAFD",
  "file": "utils.js",
  "sourceRoot": "../src",
  "sourcesContent": [
    "var parseTime = require('./parsetime');\nvar slugid    = require('slugid');\n\n/**\n * Create a Date object offset = '1d 2h 3min' into the future\n *\n * Offset format: The argument `offset` (if given) is a string on the form\n *   `1 day 2 hours 3 minutes`\n * where specification of day, hours and minutes is optional. You can also the\n * short hand `1d2h3min`, it's fairly tolerant of different spelling forms and\n * whitespace. But only really meant to be used with constants.\n */\nvar fromNow = function(offset, reference) {\n  if (reference === undefined) {\n    reference = new Date();\n  }\n  offset = parseTime(offset || '');\n\n  offset.days += 30 * offset.months;\n  offset.days += 365 * offset.years;\n\n  var retval = new Date(\n    reference.getTime()\n    //    + offset.years * 365 * 24 * 60 * 60 * 1000\n    //   + offset.month  * 30 * 24 * 60 * 60 * 1000\n    + offset.weeks   * 7 * 24 * 60 * 60 * 1000\n    + offset.days        * 24 * 60 * 60 * 1000\n    + offset.hours            * 60 * 60 * 1000\n    + offset.minutes               * 60 * 1000\n    + offset.seconds                    * 1000\n  );\n  return retval;\n};\n\n// Export fromNow\nexports.fromNow = fromNow;\n\n/**\n * Create an ISO 8601 time stamp offset = '1d 2h 3min' into the future\n *\n * This returns a time stamp in the format expected by taskcluster.\n * Compatible with Date.toJSON() from Javascript. These time stamps are string\n * that with UTC as timezone.\n *\n * Offset format: The argument `offset` (if given) is a string on the form\n *   `1 day 2 hours 3 minutes`\n * where specification of day, hours and minutes is optional. You can also the\n * short hand `1d2h3min`, it's fairly tolerant of different spelling forms and\n * whitespace. But only really meant to be used with constants.\n */\nvar fromNowJSON = function(offset, reference) {\n  return fromNow(offset, reference).toJSON();\n};\n\n// Export fromNowJSON\nexports.fromNowJSON = fromNowJSON;\n\n// Export function to generate _nice_ slugids\nexports.slugid = function() {\n  return slugid.nice();\n};\n"
  ]
}
